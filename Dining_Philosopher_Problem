#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS
#define RIGHT (philosopher_id + 1) % NUM_PHILOSOPHERS

int state[NUM_PHILOSOPHERS];
sem_t forks[NUM_PHILOSOPHERS];
sem_t mutex;

void *philosopher(void *arg) {
    int philosopher_id = *((int *)arg);
    while (1) {
        printf("Philosopher %d is thinking.\n", philosopher_id);

        sleep(rand() % 3); // Simulate thinking

        sem_wait(&mutex);
        state[philosopher_id] = HUNGRY;
        printf("Philosopher %d is hungry and wants to eat.\n", philosopher_id);
        test(philosopher_id);
        sem_post(&mutex);

        sem_wait(&forks[philosopher_id]);

        printf("Philosopher %d is eating.\n", philosopher_id);

        sleep(rand() % 3); // Simulate eating

        sem_wait(&mutex);
        state[philosopher_id] = THINKING;
        printf("Philosopher %d has finished eating and puts down chopsticks.\n", philosopher_id);
        test(LEFT);
        test(RIGHT);
        sem_post(&mutex);
    }
}

void test(int philosopher_id) {
    if (state[philosopher_id] == HUNGRY &&
        state[LEFT] != EATING &&
        state[RIGHT] != EATING) {

        state[philosopher_id] = EATING;
        sem_post(&forks[philosopher_id]);
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    sem_init(&mutex, 0, 1);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);
        state[i] = THINKING;
        philosopher_ids[i] = i;
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
